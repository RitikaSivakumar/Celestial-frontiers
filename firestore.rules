/**
 * @fileoverview Firestore Security Rules for the Mindful Path application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing controlled access to shared community connection data. User data is isolated under their respective userProfile document.
 *
 * Data Structure:
 * - /userProfiles/{userId}: User profile information, owned by the user.
 * - /userProfiles/{userId}/mentalHealthAssessments/{assessmentId}: Mental health assessments, owned by the user.
 * - /userProfiles/{userId}/medicationReminders/{reminderId}: Medication reminders, owned by the user.
 * - /userProfiles/{userId}/moodLogs/{moodLogId}: Mood logs, owned by the user.
 * - /doctors/{doctorId}: Doctor profiles (details not specified, assuming public read, admin write).
 * - /userDoctorConnections/{connectionId}: Connections between users and doctors.
 * - /userProfiles/{userId}/emergencyContactDetails/{contactId}: Emergency contact details, owned by the user.
 * - /communityConnections/{connectionId}: Connections between users in public spaces; accessible only to the initiator or participant.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and associated subcollections (assessments, reminders, mood logs, emergency contacts).
 * - Doctor profiles are publicly readable.
 * - Community connections are only accessible to the two connected users.
 * - No user listing is allowed (explicitly denied).
 *
 * Denormalization for Authorization:
 * - Community Connections: The `CommunityConnection` document stores both `initiatorUserId` and `participantUserId` directly in the document. This avoids needing to query related user profiles to determine access rights.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userProfileId}
     * @allow (create) User 'test_user' can create their profile if request.auth.uid == userProfileId.
     * @allow (get, update, delete) User 'test_user' can get, update, and delete their own profile.
     * @deny  User 'other_user' cannot get, update, or delete user 'test_user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /userProfiles/{userProfileId} {
      function isOwner(userProfileId) {
        return request.auth != null && request.auth.uid == userProfileId;
      }

      function isExistingOwner(userProfileId) {
        return isOwner(userProfileId) && resource != null;
      }

      allow get: if isOwner(userProfileId);
      allow list: if false;
      allow create: if request.auth.uid == userProfileId;
      allow update: if isExistingOwner(userProfileId);
      allow delete: if isExistingOwner(userProfileId);
    }

    /**
     * @description Controls access to mental health assessment documents within a user's profile.
     * @path /userProfiles/{userProfileId}/mentalHealthAssessments/{assessmentId}
     * @allow (create) User 'test_user' can create an assessment in their profile.
     * @allow (get, update, delete) User 'test_user' can get, update, and delete their own assessments.
     * @deny  User 'other_user' cannot get, update, or delete user 'test_user's assessments.
     * @principle Enforces document ownership for mental health assessments.
     */
    match /userProfiles/{userProfileId}/mentalHealthAssessments/{assessmentId} {
      function isOwner(userProfileId) {
        return request.auth != null && request.auth.uid == userProfileId;
      }

      function isExistingOwner(userProfileId) {
        return isOwner(userProfileId) && resource != null;
      }

      allow get: if isOwner(userProfileId);
      allow list: if false;
      allow create: if isOwner(userProfileId);
      allow update: if isExistingOwner(userProfileId);
      allow delete: if isExistingOwner(userProfileId);
    }

    /**
     * @description Controls access to medication reminder documents within a user's profile.
     * @path /userProfiles/{userProfileId}/medicationReminders/{reminderId}
     * @allow (create) User 'test_user' can create a reminder in their profile.
     * @allow (get, update, delete) User 'test_user' can get, update, and delete their own reminders.
     * @deny  User 'other_user' cannot get, update, or delete user 'test_user's reminders.
     * @principle Enforces document ownership for medication reminders.
     */
    match /userProfiles/{userProfileId}/medicationReminders/{reminderId} {
      function isOwner(userProfileId) {
        return request.auth != null && request.auth.uid == userProfileId;
      }

      function isExistingOwner(userProfileId) {
        return isOwner(userProfileId) && resource != null;
      }

      allow get: if isOwner(userProfileId);
      allow list: if false;
      allow create: if isOwner(userProfileId);
      allow update: if isExistingOwner(userProfileId);
      allow delete: if isExistingOwner(userProfileId);
    }

    /**
     * @description Controls access to mood log documents within a user's profile.
     * @path /userProfiles/{userProfileId}/moodLogs/{moodLogId}
     * @allow (create) User 'test_user' can create a mood log in their profile.
     * @allow (get, update, delete) User 'test_user' can get, update, and delete their own mood logs.
     * @deny  User 'other_user' cannot get, update, or delete user 'test_user's mood logs.
     * @principle Enforces document ownership for mood logs.
     */
    match /userProfiles/{userProfileId}/moodLogs/{moodLogId} {
      function isOwner(userProfileId) {
        return request.auth != null && request.auth.uid == userProfileId;
      }

      function isExistingOwner(userProfileId) {
        return isOwner(userProfileId) && resource != null;
      }

      allow get: if isOwner(userProfileId);
      allow list: if false;
      allow create: if isOwner(userProfileId);
      allow update: if isExistingOwner(userProfileId);
      allow delete: if isExistingOwner(userProfileId);
    }

    /**
     * @description Controls access to doctor profile documents.  Assumes public read access.  Write access should be restricted to admin roles.
     * @path /doctors/{doctorId}
     * @allow (get, list) Anyone can read doctor profiles.
     * @deny (create, update, delete) Only admins can create, update, or delete doctor profiles.
     * @principle Allows public read access to doctor profiles.
     */
    match /doctors/{doctorId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Controls access to user-doctor connection documents.
     * @path /userDoctorConnections/{connectionId}
     * @allow (create) A user can create a connection.
     * @allow (get, update, delete) Only the involved user can get, update, or delete the connection.
     * @deny  A user cannot access connections involving other users.
     */
    match /userDoctorConnections/{connectionId} {
      function isConnectedUser() {
          return request.auth.uid == resource.data.userId && request.auth.uid == resource.data.doctorId;
      }

      allow get, update, delete: if isConnectedUser();
      allow create: if request.auth.uid != null;
      allow list: if false;
    }

    /**
     * @description Controls access to emergency contact details within a user's profile.
     * @path /userProfiles/{userProfileId}/emergencyContactDetails/{contactId}
     * @allow (create) User 'test_user' can create emergency contact details in their profile.
     * @allow (get, update, delete) User 'test_user' can get, update, and delete their own emergency contact details.
     * @deny  User 'other_user' cannot get, update, or delete user 'test_user's emergency contact details.
     * @principle Enforces document ownership for emergency contact details.
     */
    match /userProfiles/{userProfileId}/emergencyContactDetails/{contactId} {
      function isOwner(userProfileId) {
        return request.auth != null && request.auth.uid == userProfileId;
      }

      function isExistingOwner(userProfileId) {
        return isOwner(userProfileId) && resource != null;
      }

      allow get: if isOwner(userProfileId);
      allow list: if false;
      allow create: if isOwner(userProfileId);
      allow update: if isExistingOwner(userProfileId);
      allow delete: if isExistingOwner(userProfileId);
    }

    /**
     * @description Controls access to community connection documents.  Only the initiator or participant can access the connection data.
     * @path /communityConnections/{connectionId}
     * @allow (get, list) User 'test_user' can read a community connection if they are the initiator or the participant.
     * @deny  User 'other_user' cannot read a community connection they are not involved in.
     * @principle Enforces that only connected users can access the connection details.
     */
    match /communityConnections/{connectionId} {
      function isParticipant() {
        return request.auth != null && (request.auth.uid == resource.data.initiatorUserId || request.auth.uid == resource.data.participantUserId);
      }

      allow get: if isParticipant();
      allow list: if false;
      allow create: if request.auth.uid != null;
      allow update: if isParticipant();
      allow delete: if isParticipant();
    }
  }
}